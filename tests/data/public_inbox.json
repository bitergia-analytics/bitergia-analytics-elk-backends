[
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "syzbot <syzbot+d692037148a8169fc9dd@syzkaller.appspotmail.com>,\n        alex.gaynor@gmail.com, andriy.shevchenko@linux.intel.com,\n        bjorn3_gh@protonmail.com, boqun.feng@gmail.com,\n        bpf@vger.domain.com, gary@garyguo.net,\n        linux-kernel@vger.domain.com, linux@rasmusvillemoes.dk,\n        ojeda@domain.com, pmladek@suse.com, rostedt@goodmis.org,\n        rust-for-linux@vger.domain.com, syzkaller-bugs@googlegroups.com,\n        wedsonaf@gmail.com,\n        Linux ARM <linux-arm-kernel@lists.infradead.org>",
         "Content-Type" : "text/plain; charset=\"UTF-8\"",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=domain.com; s=20221208; t=1682491237; x=1685083237;\n        h=cc:to:subject:message-id:date:from:in-reply-to:references\n         :mime-version:from:to:cc:subject:date:message-id:reply-to;\n        bh=26EaJCB4BLLjpmwn+UJgLwabpmkPDEPq9rinV+1slYg=;\n        b=VDIVNx8LrwzttePAvdnXS2sDN2anEP+SmBVydC+gTIck5cs4NM01wEgckxFMBH/8DB\n         Fj29SrK1x8MLN7v/rA5mQg5Z7ai9GdF/tuYZpKTkAI77zFORov6oyciyadm1vr4xipxM\n         n3lY1Dbh0xQ/asAgJJMz3gzsb1oFS2/5DAoftRk3WUOfPehnCVlh0vc9LeOvzWC9Rd6C\n         nLX81wAUVKYDjTRmapCXJZjDjvhh1kYV67j4tsJJn5m+CaiwKrThuufoKGxnsnjSyTZ8\n         yWH8uUpOy850MNsLVVOCzlwBYW+awdFfPQYzAOUeWf90+uvCsErqJ9gISEvLcHf0bsNJ\n         ZepQ==",
         "Date" : "Wed, 26 Apr 2023 08:40:23 +0200",
         "From" : "Dmitry Vyukov <dvyukov@domain.com>",
         "In-Reply-To" : "<20230426044928.GD1496740@domain.com>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<CACT4Y+bJQOYV4_VumkrwobDio8CH-oqT2Wuo4Gzz2+BkX6tqzA@mail.gmail.com>",
         "Precedence" : "bulk",
         "Received" : "by mail-lf1-x12b.domain.com with SMTP id 2adb3069b0e04-4efea87c578so7096e87.1\n        for <linux-kernel@vger.domain.com>; Tue, 25 Apr 2023 23:40:38 -0700 (PDT)",
         "References" : "<00000000000079eebe05fa2ea9ad@domain.com> <20230426044928.GD1496740@domain.com>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [syzbot] upstream boot error: BUG: unable to handle kernel NULL\n pointer dereference in __dabt_svc",
         "To" : "Sergey Senozhatsky <senozhatsky@chromium.org>",
         "X-Gm-Message-State" : "AC+VfDyK+I/7WPhmN+a3UUi81K64uNSXhCr+5z4OItR28B4KUbRNBZqX\n        qPzjmRmmvdTuVo3BThilX64kSQZHePEGvWBDljQJRA==",
         "X-Google-DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20221208; t=1682491237; x=1685083237;\n        h=cc:to:subject:message-id:date:from:in-reply-to:references\n         :mime-version:x-gm-message-state:from:to:cc:subject:date:message-id\n         :reply-to;\n        bh=26EaJCB4BLLjpmwn+UJgLwabpmkPDEPq9rinV+1slYg=;\n        b=O45TFYTvlS+lq6aCt7d2AE/1BbhzRZvD6M4pX+nmUKOA41vpzygwxaOHdleNfd5IJI\n         DWPbwlW5+PBekOyoNOsXB2BBQqqNHN0KM3guOs+9Jz6d88y5zjpoCaM7zv1mNJQeM9/L\n         2VkPVvQkj0iE8UEPXW3zNv+5eMRaJ0QDPvZvkSiv1oWR3mRjLMb/JC4WRINvgXb/iOBC\n         vbUQbxanaTmtDEuIB1g91DX+wRgLKeEyYF4d8VnPAOxa6S598rkUYeVEmS0s5FQkDX48\n         Z8LNAN+5TpRagG/4Dm+Rba6Gi+RBKVlBX9qM+UU58w8tMJyuknHHRezwdITS2QuWZ97W\n         GDGA==",
         "X-Google-Smtp-Source" : "ACHHUZ5cVNzl395xaBLbIB0gf8rLCrYPuaZPJN0WZn147Mwa5s1vko3C35Ob71ekGdCqtq/gzHms8ZpADoD8xdj8JKI=",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Received" : "by 2002:a05:6512:4023:b0:4ea:e5e2:c893 with SMTP id\n br35-20020a056512402300b004eae5e2c893mr65339lfb.1.1682491236524; Tue, 25 Apr\n 2023 23:40:36 -0700 (PDT)",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Wed, 26 Apr 2023 at 06:49, Sergey Senozhatsky\n<senozhatsky@chromium.org> wrote:\n>\n> On (23/04/25 13:06), syzbot wrote:\n> > 8<--- cut here ---\n> > Unable to handle kernel NULL pointer dereference at virtual address 000005fc when read\n> > [000005fc] *pgd=80000080004003, *pmd=00000000\n> > Internal error: Oops: 206 [#1] PREEMPT SMP ARM\n> > Modules linked in:\n> > CPU: 1 PID: 0 Comm: swapper/1 Not tainted 6.3.0-syzkaller #0\n> > Hardware name: ARM-Versatile Express\n>\n> > Insufficient stack space to handle exception!\n>\n> So much stuff is going on there.\n>\n> > Task stack:     [0xdf85c000..0xdf85e000]\n> > IRQ stack:      [0xdf804000..0xdf806000]\n> > Overflow stack: [0x828ae000..0x828af000]\n> > Internal error: kernel stack overflow: 0 [#2] PREEMPT SMP ARM\n> > Modules linked in:\n> > CPU: 1 PID: 0 Comm: swapper/1 Not tainted 6.3.0-syzkaller #0\n> > Hardware name: ARM-Versatile Express\n> > PC is at __dabt_svc+0x14/0x60 arch/arm/kernel/entry-armv.S:210\n> > LR is at vsnprintf+0x378/0x408 lib/vsprintf.c:2862\n> > pc : [<80200a74>]    lr : [<817ad5d8>]    psr: 00000193\n> > sp : df804028  ip : df805868  fp : df805864\n> > r10: 00000060  r9 : ffffffff  r8 : 00000010\n> > r7 : 00000020  r6 : 00000004  r5 : ffffffff  r4 : df805960\n> > r3 : ffffffff  r2 : 00000040  r1 : ffffffff  r0 : 8264d250\n> > Flags: nzcv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment none\n> > Control: 30c5387d  Table: 80003000  DAC: 00000000\n> > Register r0 information:\n> > 8<--- cut here ---\n> > Unable to handle kernel NULL pointer dereference at virtual address 000001ff when read\n> > [000001ff] *pgd=80000080004003, *pmd=00000000\n> > Internal error: Oops: 206 [#3] PREEMPT SMP ARM\n> > Modules linked in:\n> > CPU: 1 PID: 0 Comm: swapper/1 Not tainted 6.3.0-syzkaller #0\n> > Hardware name: ARM-Versatile Express\n> > PC is at __find_vmap_area mm/vmalloc.c:841 [inline]\n> > PC is at find_vmap_area mm/vmalloc.c:1862 [inline]\n> > PC is at find_vm_area mm/vmalloc.c:2571 [inline]\n> > PC is at vmalloc_dump_obj+0x38/0xb4 mm/vmalloc.c:4108\n> > LR is at __raw_spin_lock include/linux/spinlock_api_smp.h:132 [inline]\n> > LR is at _raw_spin_lock+0x18/0x58 kernel/locking/spinlock.c:154\n>\n> Not sure if I can make sense out of this.\n\n+linux-arm-kernel@\n\nI suspect this is some recent arch/arm related corruption.\nThere are also these similar boot crashes that started happening at\nroughly the same time:\nhttps://syzkaller.appspot.com/bug?id=4d697346183db2f86ba2f76acb7d66e7731f88df\nhttps://syzkaller.appspot.com/bug?id=dcd98d67539fe4d0d28d2e655e510569eda6f4de\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<CACT4Y+bJQOYV4_VumkrwobDio8CH-oqT2Wuo4Gzz2+BkX6tqzA@mail.gmail.com>"
      },
      "tag" : "linux",
      "timestamp" : 1687967658.98191,
      "updated_on" : 1682491223,
      "uuid" : "db8d492b25d331f1fb0df125121e17791fa85b2f"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "NeilBrown <neilb@suse.de>,\n        Alexander Viro <viro@zeniv.linux.org.uk>,\n        \"Darrick J. Wong\" <djwong@domain.com>,\n        Hugh Dickins <hughd@domain.com>,\n        Andrew Morton <akpm@linux-foundation.org>,\n        Dave Chinner <david@fromorbit.com>,\n        Chuck Lever <chuck.lever@oracle.com>, Jan Kara <jack@suse.cz>,\n        Amir Goldstein <amir73il@gmail.com>,\n        linux-fsdevel@vger.domain.com, linux-kernel@vger.domain.com,\n        linux-xfs@vger.domain.com, linux-mm@kvack.org,\n        linux-nfs@vger.domain.com",
         "Content-Disposition" : "inline",
         "Content-Type" : "text/plain; charset=utf-8",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/simple; d=domain.com;\n        s=k20201202; t=1682491305;\n        bh=GYawAKtyB+67DF5dOe3+ygfSWpsE72Z++2D8abXFW88=;\n        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;\n        b=V1dD0wk6HWcJxDIYcpu/23lmqlur3gYMpk9haqzo+sUd9+bkezKVyPBzPbckLYsPr\n         v1YpekJZY1GW1Scgx9YUrruOdi93muBTe5zT4rxoP+BOAXwYUKUoDCHHtqZ3HZqqgz\n         UEN5c+pDuBVo6HpPFyglV9uH1/rzf4ebQPcEW3CW34NBD2EKGc3za2AGLT0JuWv4gv\n         e3fhAXsxWtLXLI+6AUM2KFGAHzcR+jWLcUpkB+OYdkKQZAbnpabhpbCt2yVytPoj9m\n         ODxComtw7/rxgixJj8WfXY0Wp7L3ErkKLA47Np/3n6E7XBv9y/hqY9iy6Opk/OWra6\n         eaV2j2Q5JoNYA==",
         "Date" : "Wed, 26 Apr 2023 08:41:38 +0200",
         "From" : "Christian Brauner <brauner@domain.com>",
         "In-Reply-To" : "<404a9a8066b0735c9f355214d4eadf0d975b3188.camel@domain.com>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<20230426-notlage-inspizieren-938380b785dd@brauner>",
         "Precedence" : "bulk",
         "Received" : "by smtp.domain.com (Postfix) with ESMTPSA id D2EEEC433EF;\n        Wed, 26 Apr 2023 06:41:41 +0000 (UTC)",
         "References" : "<20230424151104.175456-1-jlayton@domain.com>\n <20230424151104.175456-2-jlayton@domain.com>\n <168237287734.24821.11016713590413362200@noble.neil.brown.name>\n <404a9a8066b0735c9f355214d4eadf0d975b3188.camel@domain.com>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [PATCH v2 1/3] fs: add infrastructure for multigrain inode\n i_m/ctime",
         "To" : "Jeff Layton <jlayton@domain.com>",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Mon, Apr 24, 2023 at 06:30:45PM -0400, Jeff Layton wrote:\n> On Tue, 2023-04-25 at 07:47 +1000, NeilBrown wrote:\n> > On Tue, 25 Apr 2023, Jeff Layton wrote:\n> > > The VFS always uses coarse-grained timestamp updates for filling out the\n> > > ctime and mtime after a change. This has the benefit of allowing\n> > > filesystems to optimize away a lot metaupdates, to around once per\n> > > jiffy, even when a file is under heavy writes.\n> > > \n> > > Unfortunately, this has always been an issue when we're exporting via\n> > > NFSv3, which relies on timestamps to validate caches. Even with NFSv4, a\n> > > lot of exported filesystems don't properly support a change attribute\n> > > and are subject to the same problems with timestamp granularity. Other\n> > > applications have similar issues (e.g backup applications).\n> > > \n> > > Switching to always using fine-grained timestamps would improve the\n> > > situation for NFS, but that becomes rather expensive, as the underlying\n> > > filesystem will have to log a lot more metadata updates.\n> > > \n> > > What we need is a way to only use fine-grained timestamps when they are\n> > > being actively queried:\n> > > \n> > > Whenever the mtime changes, the ctime must also change since we're\n> > > changing the metadata. When a superblock has a s_time_gran >1, we can\n> > > use the lowest-order bit of the inode->i_ctime as a flag to indicate\n> > > that the value has been queried. Then on the next write, we'll fetch a\n> > > fine-grained timestamp instead of the usual coarse-grained one.\n> > \n> > This assumes that any s_time_gran value greater then 1, is even.  This is\n> > currently true in practice (it is always a power of 10 I think).\n> > But should we have a WARN_ON_ONCE() somewhere just in case?\n> > \n> > > \n> > > We could enable this for any filesystem that has a s_time_gran >1, but\n> > > for now, this patch adds a new SB_MULTIGRAIN_TS flag to allow filesystems\n> > > to opt-in to this behavior.\n> > > \n> > > It then adds a new current_ctime function that acts like the\n> > > current_time helper, but will conditionally grab fine-grained timestamps\n> > > when the flag is set in the current ctime. Also, there is a new\n> > > generic_fill_multigrain_cmtime for grabbing the c/mtime out of the inode\n> > > and atomically marking the ctime as queried.\n> > > \n> > > Later patches will convert filesystems over to this new scheme.\n> > > \n> > > Signed-off-by: Jeff Layton <jlayton@domain.com>\n> > > ---\n> > >  fs/inode.c         | 57 +++++++++++++++++++++++++++++++++++++++---\n> > >  fs/stat.c          | 24 ++++++++++++++++++\n> > >  include/linux/fs.h | 62 ++++++++++++++++++++++++++++++++--------------\n> > >  3 files changed, 121 insertions(+), 22 deletions(-)\n> > > \n> > > diff --git a/fs/inode.c b/fs/inode.c\n> > > index 4558dc2f1355..4bd11bdb46d4 100644\n> > > --- a/fs/inode.c\n> > > +++ b/fs/inode.c\n> > > @@ -2030,6 +2030,7 @@ EXPORT_SYMBOL(file_remove_privs);\n> > >  static int inode_needs_update_time(struct inode *inode, struct timespec64 *now)\n> > >  {\n> > >  \tint sync_it = 0;\n> > > +\tstruct timespec64 ctime = inode->i_ctime;\n> > >  \n> > >  \t/* First try to exhaust all avenues to not sync */\n> > >  \tif (IS_NOCMTIME(inode))\n> > > @@ -2038,7 +2039,9 @@ static int inode_needs_update_time(struct inode *inode, struct timespec64 *now)\n> > >  \tif (!timespec64_equal(&inode->i_mtime, now))\n> > >  \t\tsync_it = S_MTIME;\n> > >  \n> > > -\tif (!timespec64_equal(&inode->i_ctime, now))\n> > > +\tif (is_multigrain_ts(inode))\n> > > +\t\tctime.tv_nsec &= ~I_CTIME_QUERIED;\n> > > +\tif (!timespec64_equal(&ctime, now))\n> > >  \t\tsync_it |= S_CTIME;\n> > >  \n> > >  \tif (IS_I_VERSION(inode) && inode_iversion_need_inc(inode))\n> > > @@ -2062,6 +2065,50 @@ static int __file_update_time(struct file *file, struct timespec64 *now,\n> > >  \treturn ret;\n> > >  }\n> > >  \n> > > +/**\n> > > + * current_ctime - Return FS time (possibly high-res)\n> > > + * @inode: inode.\n> > > + *\n> > > + * Return the current time truncated to the time granularity supported by\n> > > + * the fs, as suitable for a ctime/mtime change.\n> > > + *\n> > > + * For a multigrain timestamp, if the timestamp is flagged as having been\n> > > + * QUERIED, then get a fine-grained timestamp.\n> > > + */\n> > > +struct timespec64 current_ctime(struct inode *inode)\n> > > +{\n> > > +\tstruct timespec64 now;\n> > > +\tlong nsec = 0;\n> > > +\tbool multigrain = is_multigrain_ts(inode);\n> > > +\n> > > +\tif (multigrain) {\n> > > +\t\tatomic_long_t *pnsec = (atomic_long_t *)&inode->i_ctime.tv_nsec;\n> > > +\n> > > +\t\tnsec = atomic_long_fetch_and(~I_CTIME_QUERIED, pnsec);\n> > \n> >  atomic_long_fetch_andnot(I_CTIME_QUERIED, pnsec)  ??\n> > \n> \n> I didn't realize that existed! Sure, I can make that change.\n> \n> > > +\t}\n> > > +\n> > > +\tif (nsec & I_CTIME_QUERIED) {\n> > > +\t\tktime_get_real_ts64(&now);\n> > > +\t} else {\n> > > +\t\tktime_get_coarse_real_ts64(&now);\n> > > +\n> > > +\t\tif (multigrain) {\n> > > +\t\t\t/*\n> > > +\t\t\t * If we've recently fetched a fine-grained timestamp\n> > > +\t\t\t * then the coarse-grained one may be earlier than the\n> > > +\t\t\t * existing one. Just keep the existing ctime if so.\n> > > +\t\t\t */\n> > > +\t\t\tstruct timespec64 ctime = inode->i_ctime;\n> > > +\n> > > +\t\t\tif (timespec64_compare(&ctime, &now) > 0)\n> > > +\t\t\t\tnow = ctime;\n> > \n> > I think this ctime could have the I_CTIME_QUERIED bit set.  We probably\n> > don't want that ??\n> > \n> > \n> \n> The timestamp_truncate below will take care of it.\n> \n> > > +\t\t}\n> > > +\t}\n> > > +\n> > > +\treturn timestamp_truncate(now, inode);\n> > > +}\n> > > +EXPORT_SYMBOL(current_ctime);\n> > > +\n> > >  /**\n> > >   * file_update_time - update mtime and ctime time\n> > >   * @file: file accessed\n> > > @@ -2080,7 +2127,7 @@ int file_update_time(struct file *file)\n> > >  {\n> > >  \tint ret;\n> > >  \tstruct inode *inode = file_inode(file);\n> > > -\tstruct timespec64 now = current_time(inode);\n> > > +\tstruct timespec64 now = current_ctime(inode);\n> > >  \n> > >  \tret = inode_needs_update_time(inode, &now);\n> > >  \tif (ret <= 0)\n> > > @@ -2109,7 +2156,7 @@ static int file_modified_flags(struct file *file, int flags)\n> > >  {\n> > >  \tint ret;\n> > >  \tstruct inode *inode = file_inode(file);\n> > > -\tstruct timespec64 now = current_time(inode);\n> > > +\tstruct timespec64 now = current_ctime(inode);\n> > >  \n> > >  \t/*\n> > >  \t * Clear the security bits if the process is not being run by root.\n> > > @@ -2419,9 +2466,11 @@ struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode)\n> > >  \tif (unlikely(t.tv_sec == sb->s_time_max || t.tv_sec == sb->s_time_min))\n> > >  \t\tt.tv_nsec = 0;\n> > >  \n> > > -\t/* Avoid division in the common cases 1 ns and 1 s. */\n> > > +\t/* Avoid division in the common cases 1 ns, 2 ns and 1 s. */\n> > >  \tif (gran == 1)\n> > >  \t\t; /* nothing */\n> > > +\telse if (gran == 2)\n> > > +\t\tt.tv_nsec &= ~1L;\n> > >  \telse if (gran == NSEC_PER_SEC)\n> > >  \t\tt.tv_nsec = 0;\n> > >  \telse if (gran > 1 && gran < NSEC_PER_SEC)\n> > > diff --git a/fs/stat.c b/fs/stat.c\n> > > index 7c238da22ef0..67b56daf9663 100644\n> > > --- a/fs/stat.c\n> > > +++ b/fs/stat.c\n> > > @@ -26,6 +26,30 @@\n> > >  #include \"internal.h\"\n> > >  #include \"mount.h\"\n> > >  \n> > > +/**\n> > > + * generic_fill_multigrain_cmtime - Fill in the mtime and ctime and flag ctime as QUERIED\n> > > + * @inode: inode from which to grab the c/mtime\n> > > + * @stat: where to store the resulting values\n> > > + *\n> > > + * Given @inode, grab the ctime and mtime out if it and store the result\n> > > + * in @stat. When fetching the value, flag it as queried so the next write\n> > > + * will use a fine-grained timestamp.\n> > > + */\n> > > +void generic_fill_multigrain_cmtime(struct inode *inode, struct kstat *stat)\n> > > +{\n> > > +\tatomic_long_t *pnsec = (atomic_long_t *)&inode->i_ctime.tv_nsec;\n> > > +\n> > > +\tstat->mtime = inode->i_mtime;\n> > > +\tstat->ctime.tv_sec = inode->i_ctime.tv_sec;\n> > > +\t/*\n> > > +\t * Atomically set the QUERIED flag and fetch the new value with\n> > > +\t * the flag masked off.\n> > > +\t */\n> > > +\tstat->ctime.tv_nsec = atomic_long_fetch_or(I_CTIME_QUERIED, pnsec)\n> > > +\t\t\t\t\t& ~I_CTIME_QUERIED;\n> > > +}\n> > > +EXPORT_SYMBOL(generic_fill_multigrain_cmtime);\n> > > +\n> > >  /**\n> > >   * generic_fillattr - Fill in the basic attributes from the inode struct\n> > >   * @idmap:\tidmap of the mount the inode was found from\n> > > diff --git a/include/linux/fs.h b/include/linux/fs.h\n> > > index c85916e9f7db..e6dd3ce051ef 100644\n> > > --- a/include/linux/fs.h\n> > > +++ b/include/linux/fs.h\n> > > @@ -1059,21 +1059,22 @@ extern int send_sigurg(struct fown_struct *fown);\n> > >   * sb->s_flags.  Note that these mirror the equivalent MS_* flags where\n> > >   * represented in both.\n> > >   */\n> > > -#define SB_RDONLY\t 1\t/* Mount read-only */\n> > > -#define SB_NOSUID\t 2\t/* Ignore suid and sgid bits */\n> > > -#define SB_NODEV\t 4\t/* Disallow access to device special files */\n> > > -#define SB_NOEXEC\t 8\t/* Disallow program execution */\n> > > -#define SB_SYNCHRONOUS\t16\t/* Writes are synced at once */\n> > > -#define SB_MANDLOCK\t64\t/* Allow mandatory locks on an FS */\n> > > -#define SB_DIRSYNC\t128\t/* Directory modifications are synchronous */\n> > > -#define SB_NOATIME\t1024\t/* Do not update access times. */\n> > > -#define SB_NODIRATIME\t2048\t/* Do not update directory access times */\n> > > -#define SB_SILENT\t32768\n> > > -#define SB_POSIXACL\t(1<<16)\t/* VFS does not apply the umask */\n> > > -#define SB_INLINECRYPT\t(1<<17)\t/* Use blk-crypto for encrypted files */\n> > > -#define SB_KERNMOUNT\t(1<<22) /* this is a kern_mount call */\n> > > -#define SB_I_VERSION\t(1<<23) /* Update inode I_version field */\n> > > -#define SB_LAZYTIME\t(1<<25) /* Update the on-disk [acm]times lazily */\n> > > +#define SB_RDONLY\t\t(1<<0)\t/* Mount read-only */\n> > \n> >  BIT(0) ???\n> > \n> \n> Even better. I'll revise it.\n\nPlease split this and the alignment stuff below into a preparatory\ncleanup patch.\n\n> \n> > > +#define SB_NOSUID\t\t(1<<1)\t/* Ignore suid and sgid bits */\n> > \n> >  BIT(1) ??\n> > \n> > > +#define SB_NODEV\t\t(1<<2)\t/* Disallow access to device special files */\n> > > +#define SB_NOEXEC\t\t(1<<3)\t/* Disallow program execution */\n> > > +#define SB_SYNCHRONOUS\t\t(1<<4)\t/* Writes are synced at once */\n> > > +#define SB_MANDLOCK\t\t(1<<6)\t/* Allow mandatory locks on an FS */\n> > > +#define SB_DIRSYNC\t\t(1<<7)\t/* Directory modifications are synchronous */\n> > > +#define SB_NOATIME\t\t(1<<10)\t/* Do not update access times. */\n> > > +#define SB_NODIRATIME\t\t(1<<11)\t/* Do not update directory access times */\n> > > +#define SB_SILENT\t\t(1<<15)\n> > > +#define SB_POSIXACL\t\t(1<<16)\t/* VFS does not apply the umask */\n> > > +#define SB_INLINECRYPT\t\t(1<<17)\t/* Use blk-crypto for encrypted files */\n> > > +#define SB_KERNMOUNT\t\t(1<<22) /* this is a kern_mount call */\n> > > +#define SB_I_VERSION\t\t(1<<23) /* Update inode I_version field */\n> > > +#define SB_MULTIGRAIN_TS\t(1<<24) /* Use multigrain c/mtimes */\n> > > +#define SB_LAZYTIME\t\t(1<<25) /* Update the on-disk [acm]times lazily */\n> > >  \n> > >  /* These sb flags are internal to the kernel */\n> > >  #define SB_SUBMOUNT     (1<<26)\n> > \n> > Why not align this one too?\n> > \n> \n> Sure. I'll add that in for the next one.\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<20230426-notlage-inspizieren-938380b785dd@brauner>"
      },
      "tag" : "linux",
      "timestamp" : 1687967658.98897,
      "updated_on" : 1682491298,
      "uuid" : "6e85f723f86cc0ff537f6aff2183bcb000ff47f5"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "Johannes Berg <johannes.berg@intel.com>,\n        linux-wireless@vger.domain.com, netdev@vger.domain.com,\n        linux-kernel@vger.domain.com,\n        Johannes Berg <johannes@sipsolutions.net>,\n        \"David S. Miller\" <davem@davemloft.net>,\n        Eric Dumazet <edumazet@domain.com>,\n        Jakub Kicinski <kuba@domain.com>,\n        Paolo Abeni <pabeni@redhat.com>,\n        Gregory Greenman <gregory.greenman@intel.com>,\n        Alexander Wetzel <alexander@wetzel-home.de>",
         "Content-Disposition" : "inline",
         "Content-Type" : "text/plain; charset=us-ascii",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/simple; d=domain.com;\n        s=k20201202; t=1682491309;\n        bh=33xG/M/NBRJczmm4X8iDO3HtDmQq6ILZHrp/h2howPo=;\n        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;\n        b=dhZLYNZb5OlgY2Dkmwt2JWngNzdJtJNY2OogDAG7OFmxDZsA9SgNiGxff17Ug+895\n         MGO9gKp8Lciw0PD/fqxZv6hVOAzRPW/AXVKSQ+ist12vspGYmJSPBO5QOpkpH6bRcB\n         3EmEZ5ctV+WW3D5kZONuSmj63Rijv46DHqTg/NZRtOBHoYlMIiXi4/1PB0Y2/mltg5\n         V47oo+zs4Ki4q7jfqKj0Cna+1hD02FmKfzSDJQdQxFU7nWul+Nw3RBhAC0lH6cQ3MK\n         EaNVVNTCDBu7tgqiatKWUeG8lc3Ms5zgdhFDMdQLkWAl87cGZGy9zIHTlz6WZW85kg\n         WH+RYX/VFNDhA==",
         "Date" : "Wed, 26 Apr 2023 09:41:45 +0300",
         "From" : "Leon Romanovsky <leon@hotmail.com>",
         "In-Reply-To" : "<20230425164005.25272-1-mirsad.todorovac@alu.unizg.hr>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<20230426064145.GE27649@unreal>",
         "Precedence" : "bulk",
         "Received" : "by smtp.domain.com (Postfix) with ESMTPSA id 0C7B5C433EF;\n        Wed, 26 Apr 2023 06:41:48 +0000 (UTC)",
         "References" : "<20230425164005.25272-1-mirsad.todorovac@alu.unizg.hr>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [PATCH v4 1/1] wifi: mac80211: fortify the spinlock against\n deadlock by interrupt",
         "To" : "Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Tue, Apr 25, 2023 at 06:40:08PM +0200, Mirsad Goran Todorovac wrote:\n> In the function ieee80211_tx_dequeue() there is a particular locking\n> sequence:\n> \n> begin:\n> \tspin_lock(&local->queue_stop_reason_lock);\n> \tq_stopped = local->queue_stop_reasons[q];\n> \tspin_unlock(&local->queue_stop_reason_lock);\n> \n> However small the chance (increased by ftracetest), an asynchronous\n> interrupt can occur in between of spin_lock() and spin_unlock(),\n> and the interrupt routine will attempt to lock the same\n> &local->queue_stop_reason_lock again.\n> \n> This will cause a costly reset of the CPU and the wifi device or an\n> altogether hang in the single CPU and single core scenario.\n> \n> The only remaining spin_lock(&local->queue_stop_reason_lock) that\n> did not disable interrupts was patched, which should prevent any\n> deadlocks on the same CPU/core and the same wifi device.\n> \n> This is the probable trace of the deadlock:\n> \n> kernel: ================================\n> kernel: WARNING: inconsistent lock state\n> kernel: 6.3.0-rc6-mt-20230401-00001-gf86822a1170f #4 Tainted: G        W\n> kernel: --------------------------------\n> kernel: inconsistent {IN-SOFTIRQ-W} -> {SOFTIRQ-ON-W} usage.\n> kernel: kworker/5:0/25656 [HC0[0]:SC0[0]:HE1:SE1] takes:\n> kernel: ffff9d6190779478 (&local->queue_stop_reason_lock){+.?.}-{2:2}, at: return_to_handler+0x0/0x40\n> kernel: {IN-SOFTIRQ-W} state was registered at:\n> kernel:   lock_acquire+0xc7/0x2d0\n> kernel:   _raw_spin_lock+0x36/0x50\n> kernel:   ieee80211_tx_dequeue+0xb4/0x1330 [mac80211]\n> kernel:   iwl_mvm_mac_itxq_xmit+0xae/0x210 [iwlmvm]\n> kernel:   iwl_mvm_mac_wake_tx_queue+0x2d/0xd0 [iwlmvm]\n> kernel:   ieee80211_queue_skb+0x450/0x730 [mac80211]\n> kernel:   __ieee80211_xmit_fast.constprop.66+0x834/0xa50 [mac80211]\n> kernel:   __ieee80211_subif_start_xmit+0x217/0x530 [mac80211]\n> kernel:   ieee80211_subif_start_xmit+0x60/0x580 [mac80211]\n> kernel:   dev_hard_start_xmit+0xb5/0x260\n> kernel:   __dev_queue_xmit+0xdbe/0x1200\n> kernel:   neigh_resolve_output+0x166/0x260\n> kernel:   ip_finish_output2+0x216/0xb80\n> kernel:   __ip_finish_output+0x2a4/0x4d0\n> kernel:   ip_finish_output+0x2d/0xd0\n> kernel:   ip_output+0x82/0x2b0\n> kernel:   ip_local_out+0xec/0x110\n> kernel:   igmpv3_sendpack+0x5c/0x90\n> kernel:   igmp_ifc_timer_expire+0x26e/0x4e0\n> kernel:   call_timer_fn+0xa5/0x230\n> kernel:   run_timer_softirq+0x27f/0x550\n> kernel:   __do_softirq+0xb4/0x3a4\n> kernel:   irq_exit_rcu+0x9b/0xc0\n> kernel:   sysvec_apic_timer_interrupt+0x80/0xa0\n> kernel:   asm_sysvec_apic_timer_interrupt+0x1f/0x30\n> kernel:   _raw_spin_unlock_irqrestore+0x3f/0x70\n> kernel:   free_to_partial_list+0x3d6/0x590\n> kernel:   __slab_free+0x1b7/0x310\n> kernel:   kmem_cache_free+0x52d/0x550\n> kernel:   putname+0x5d/0x70\n> kernel:   do_sys_openat2+0x1d7/0x310\n> kernel:   do_sys_open+0x51/0x80\n> kernel:   __x64_sys_openat+0x24/0x30\n> kernel:   do_syscall_64+0x5c/0x90\n> kernel:   entry_SYSCALL_64_after_hwframe+0x72/0xdc\n> kernel: irq event stamp: 5120729\n> kernel: hardirqs last  enabled at (5120729): [<ffffffff9d149936>] trace_graph_return+0xd6/0x120\n> kernel: hardirqs last disabled at (5120728): [<ffffffff9d149950>] trace_graph_return+0xf0/0x120\n> kernel: softirqs last  enabled at (5069900): [<ffffffff9cf65b60>] return_to_handler+0x0/0x40\n> kernel: softirqs last disabled at (5067555): [<ffffffff9cf65b60>] return_to_handler+0x0/0x40\n> kernel:\n>         other info that might help us debug this:\n> kernel:  Possible unsafe locking scenario:\n> kernel:        CPU0\n> kernel:        ----\n> kernel:   lock(&local->queue_stop_reason_lock);\n> kernel:   <Interrupt>\n> kernel:     lock(&local->queue_stop_reason_lock);\n> kernel:\n>          *** DEADLOCK ***\n> kernel: 8 locks held by kworker/5:0/25656:\n> kernel:  #0: ffff9d618009d138 ((wq_completion)events_freezable){+.+.}-{0:0}, at: process_one_work+0x1ca/0x530\n> kernel:  #1: ffffb1ef4637fe68 ((work_completion)(&local->restart_work)){+.+.}-{0:0}, at: process_one_work+0x1ce/0x530\n> kernel:  #2: ffffffff9f166548 (rtnl_mutex){+.+.}-{3:3}, at: return_to_handler+0x0/0x40\n> kernel:  #3: ffff9d6190778728 (&rdev->wiphy.mtx){+.+.}-{3:3}, at: return_to_handler+0x0/0x40\n> kernel:  #4: ffff9d619077b480 (&mvm->mutex){+.+.}-{3:3}, at: return_to_handler+0x0/0x40\n> kernel:  #5: ffff9d61907bacd8 (&trans_pcie->mutex){+.+.}-{3:3}, at: return_to_handler+0x0/0x40\n> kernel:  #6: ffffffff9ef9cda0 (rcu_read_lock){....}-{1:2}, at: iwl_mvm_queue_state_change+0x59/0x3a0 [iwlmvm]\n> kernel:  #7: ffffffff9ef9cda0 (rcu_read_lock){....}-{1:2}, at: iwl_mvm_mac_itxq_xmit+0x42/0x210 [iwlmvm]\n> kernel:\n>         stack backtrace:\n> kernel: CPU: 5 PID: 25656 Comm: kworker/5:0 Tainted: G        W          6.3.0-rc6-mt-20230401-00001-gf86822a1170f #4\n> kernel: Hardware name: LENOVO 82H8/LNVNB161216, BIOS GGCN51WW 11/16/2022\n> kernel: Workqueue: events_freezable ieee80211_restart_work [mac80211]\n> kernel: Call Trace:\n> kernel:  <TASK>\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  dump_stack_lvl+0x5f/0xa0\n> kernel:  dump_stack+0x14/0x20\n> kernel:  print_usage_bug.part.46+0x208/0x2a0\n> kernel:  mark_lock.part.47+0x605/0x630\n> kernel:  ? sched_clock+0xd/0x20\n> kernel:  ? trace_clock_local+0x14/0x30\n> kernel:  ? __rb_reserve_next+0x5f/0x490\n> kernel:  ? _raw_spin_lock+0x1b/0x50\n> kernel:  __lock_acquire+0x464/0x1990\n> kernel:  ? mark_held_locks+0x4e/0x80\n> kernel:  lock_acquire+0xc7/0x2d0\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  ? ftrace_return_to_handler+0x8b/0x100\n> kernel:  ? preempt_count_add+0x4/0x70\n> kernel:  _raw_spin_lock+0x36/0x50\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  ieee80211_tx_dequeue+0xb4/0x1330 [mac80211]\n> kernel:  ? prepare_ftrace_return+0xc5/0x190\n> kernel:  ? ftrace_graph_func+0x16/0x20\n> kernel:  ? 0xffffffffc02ab0b1\n> kernel:  ? lock_acquire+0xc7/0x2d0\n> kernel:  ? iwl_mvm_mac_itxq_xmit+0x42/0x210 [iwlmvm]\n> kernel:  ? ieee80211_tx_dequeue+0x9/0x1330 [mac80211]\n> kernel:  ? __rcu_read_lock+0x4/0x40\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_mvm_mac_itxq_xmit+0xae/0x210 [iwlmvm]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_mvm_queue_state_change+0x311/0x3a0 [iwlmvm]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_mvm_wake_sw_queue+0x17/0x20 [iwlmvm]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_txq_gen2_unmap+0x1c9/0x1f0 [iwlwifi]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_txq_gen2_free+0x55/0x130 [iwlwifi]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_txq_gen2_tx_free+0x63/0x80 [iwlwifi]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  _iwl_trans_pcie_gen2_stop_device+0x3f3/0x5b0 [iwlwifi]\n> kernel:  ? _iwl_trans_pcie_gen2_stop_device+0x9/0x5b0 [iwlwifi]\n> kernel:  ? mutex_lock_nested+0x4/0x30\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_trans_pcie_gen2_stop_device+0x5f/0x90 [iwlwifi]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_mvm_stop_device+0x78/0xd0 [iwlmvm]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  __iwl_mvm_mac_start+0x114/0x210 [iwlmvm]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  iwl_mvm_mac_start+0x76/0x150 [iwlmvm]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  drv_start+0x79/0x180 [mac80211]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  ieee80211_reconfig+0x1523/0x1ce0 [mac80211]\n> kernel:  ? synchronize_net+0x4/0x50\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  ieee80211_restart_work+0x108/0x170 [mac80211]\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  process_one_work+0x250/0x530\n> kernel:  ? ftrace_regs_caller_end+0x66/0x66\n> kernel:  worker_thread+0x48/0x3a0\n> kernel:  ? __pfx_worker_thread+0x10/0x10\n> kernel:  kthread+0x10f/0x140\n> kernel:  ? __pfx_kthread+0x10/0x10\n> kernel:  ret_from_fork+0x29/0x50\n> kernel:  </TASK>\n> \n> Fixes: 4444bc2116ae (\"wifi: mac80211: Proper mark iTXQs for resumption\")\n> Link: https://lore.domain.com/all/1f58a0d1-d2b9-d851-73c3-93fcc607501c@alu.unizg.hr/\n> Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>\n> Cc: Gregory Greenman <gregory.greenman@intel.com>\n> Cc: Johannes Berg <johannes.berg@intel.com>\n> Link: https://lore.domain.com/all/cdc80531-f25f-6f9d-b15f-25e16130b53a@alu.unizg.hr/\n> Cc: David S. Miller <davem@davemloft.net>\n> Cc: Eric Dumazet <edumazet@domain.com>\n> Cc: Jakub Kicinski <kuba@domain.com>\n> Cc: Paolo Abeni <pabeni@redhat.com>\n> Cc: Leon Romanovsky <leon@domain.com>\n> Cc: Alexander Wetzel <alexander@wetzel-home.de>\n> Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>\n> ---\n> v3 -> v4:\n> - Added whole lockdep trace as advised.\n> - Trimmed irrelevant line prefix.\n> v2 -> v3:\n> - Fix the Fixes: tag as advised.\n> - Change the net: to wifi: to comply with the original patch that\n>   is being fixed.\n> v1 -> v2:\n> - Minor rewording and clarification.\n> - Cc:-ed people that replied to the original bug report (forgotten\n>   in v1 by omission).\n> \n>  net/mac80211/tx.c | 5 +++--\n>  1 file changed, 3 insertions(+), 2 deletions(-)\n> \n\nThanks,\nReviewed-by: Leon Romanovsky <leonro@nvidia.com>\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<20230426064145.GE27649@unreal>"
      },
      "tag" : "linux",
      "timestamp" : 1687967658.99562,
      "updated_on" : 1682491305,
      "uuid" : "ce913a89d4cd56c89b0f9a47d728e387622f07af"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "dri-devel@lists.freedesktop.org, stable@vger.domain.com, Alex Deucher <alexander.deucher@amd.com>, Christian  König  <christian.koenig@amd.com>, \"Pan, Xinhui\" <Xinhui.Pan@amd.com>, David Airlie <airlied@gmail.com>, Daniel Vetter <daniel@ffwll.ch>, amd-gfx@lists.freedesktop.org, linux-kernel@vger.domain.com",
         "Content-Disposition" : "inline",
         "Content-Type" : "text/plain; charset=us-ascii",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/simple; d=linuxfoundation.org;\n        s=korg; t=1682491374;\n        bh=BbD0U7ebbi3qqSF7uHQF72OPJWuCMl7jaAsF2SMWrRc=;\n        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;\n        b=luXqmbPJZ5rMrScH7ZMstT27C7ziFsdr//ltLEmE02Hd4C8t+vyQ0rAtcoVbDuiO+\n         2Jd8Ky5NlXit+psANPgmBkID/pJQx5kIoqiWP9RRyc30Zkf3eJ+OGv/aPw7AZwqmri\n         8pU0LDSIE0217MnBKdc6P5WSK7fBF8QyN7aIlGjQ=",
         "Date" : "Wed, 26 Apr 2023 08:42:51 +0200",
         "From" : "Greg KH <gregkh@gnome.org>",
         "In-Reply-To" : "<20230426061718.755586-1-olvaffe@gmail.com>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<2023042627-hypnosis-unlovely-d679@gregkh>",
         "Precedence" : "bulk",
         "Received" : "by smtp.domain.com (Postfix) with ESMTPSA id AFE9EC433EF;\n        Wed, 26 Apr 2023 06:42:53 +0000 (UTC)",
         "References" : "<20230426061718.755586-1-olvaffe@gmail.com>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [PATCH v2] drm/amdgpu: add a missing lock for AMDGPU_SCHED",
         "To" : "Chia-I Wu <olvaffe@gmail.com>",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Tue, Apr 25, 2023 at 11:17:14PM -0700, Chia-I Wu wrote:\n> mgr->ctx_handles should be protected by mgr->lock.\n> \n> v2: improve commit message\n> \n> Signed-off-by: Chia-I Wu <olvaffe@gmail.com>\n> Cc: stable@vger.domain.com\n\nWhat commit id does this fix?  How far back in stable kernels should\nthis go?\n\nthanks,\n\ngreg k-h\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<2023042627-hypnosis-unlovely-d679@gregkh>"
      },
      "tag" : "linux",
      "timestamp" : 1687967659.00242,
      "updated_on" : 1682491371,
      "uuid" : "e6e0f0b4704d2943c2549ab55660786c9c5bf66a"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "linux-ia64@vger.domain.com",
         "Content-Transfer-Encoding" : "8bit",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;\n        s=mimecast20190719; t=1682491836;\n        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:\n         to:to:cc:cc:mime-version:mime-version:\n         content-transfer-encoding:content-transfer-encoding;\n        bh=2EMYluwvhrMA17BDykO/E+Vbp/FohqG3vlUmCHX23RY=;\n        b=IqvtpSGyrf4TVSrzBsSODe9+HSucHL6RpLyMPvz9V1RLMHbGkBpQGWx33rjk6xzMfRg4GD\n        zsk/nOyQCbVeZEeXaP1uzodO6Je2dBAnCejeaXGEcpuJBY18EdY8uIV0nmDS8wGE4IS/t8\n        QG24Ifyis6Bszxmr4xuc+jxJixJ5KPk=",
         "Date" : "Wed, 26 Apr 2023 08:50:32 +0200",
         "From" : "Thomas Huth <thuth@redhat.com>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<20230426065032.517693-1-thuth@redhat.com>",
         "Precedence" : "bulk",
         "Received" : "from thuth.com (unknown [10.39.192.151])\n        by smtp.corp.redhat.com (Postfix) with ESMTP id 7F29040C6E67;\n        Wed, 26 Apr 2023 06:50:33 +0000 (UTC)",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "[PATCH] arch/ia64/include: Remove CONFIG_IA64_DEBUG_CMPXCHG from uapi header",
         "To" : "linux-kernel@vger.domain.com, Arnd Bergmann <arnd@arndb.de>",
         "X-MC-Unique" : "fJMySYbeMG6TtRg1n50BnA-1",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Scanned-By" : "MIMEDefang 3.1 on 10.11.54.2",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "CONFIG_* switches should not be exposed in uapi headers.\nThe macros that are defined here are also only useful for the\nkernel code, so let's move them to asm/cmpxchg.h instead.\n\nThe only two files that are using these macros are the headers\narch/ia64/include/asm/bitops.h and arch/ia64/include/asm/atomic.h\nand these include asm/cmpxchg.h via asm/intrinsics.h, so this\nmovement should not cause any trouble.\n\nSigned-off-by: Thomas Huth <thuth@redhat.com>\n---\n arch/ia64/include/asm/cmpxchg.h      | 17 +++++++++++++++++\n arch/ia64/include/uapi/asm/cmpxchg.h | 17 -----------------\n scripts/headers_install.sh           |  1 -\n 3 files changed, 17 insertions(+), 18 deletions(-)\n\ndiff --git a/arch/ia64/include/asm/cmpxchg.h b/arch/ia64/include/asm/cmpxchg.h\nindex 94ef84429843..d9f01ede9768 100644\n--- a/arch/ia64/include/asm/cmpxchg.h\n+++ b/arch/ia64/include/asm/cmpxchg.h\n@@ -13,4 +13,21 @@\n #define arch_cmpxchg_local\t\tarch_cmpxchg\n #define arch_cmpxchg64_local\t\tarch_cmpxchg64\n \n+#ifdef CONFIG_IA64_DEBUG_CMPXCHG\n+# define CMPXCHG_BUGCHECK_DECL\tint _cmpxchg_bugcheck_count = 128;\n+# define CMPXCHG_BUGCHECK(v)\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+\tif (_cmpxchg_bugcheck_count-- <= 0) {\t\t\t\t\\\n+\t\tvoid *ip;\t\t\t\t\t\t\\\n+\t\textern int _printk(const char *fmt, ...);\t\t\\\n+\t\tip = (void *) ia64_getreg(_IA64_REG_IP);\t\t\\\n+\t\t_printk(\"CMPXCHG_BUGCHECK: stuck at %p on word %p\\n\", ip, (v));\\\n+\t\tbreak;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+} while (0)\n+#else /* !CONFIG_IA64_DEBUG_CMPXCHG */\n+# define CMPXCHG_BUGCHECK_DECL\n+# define CMPXCHG_BUGCHECK(v)\n+#endif /* !CONFIG_IA64_DEBUG_CMPXCHG */\n+\n #endif /* _ASM_IA64_CMPXCHG_H */\ndiff --git a/arch/ia64/include/uapi/asm/cmpxchg.h b/arch/ia64/include/uapi/asm/cmpxchg.h\nindex 259ae57570bf..986dbe01d883 100644\n--- a/arch/ia64/include/uapi/asm/cmpxchg.h\n+++ b/arch/ia64/include/uapi/asm/cmpxchg.h\n@@ -133,23 +133,6 @@ extern long ia64_cmpxchg_called_with_bad_pointer(void);\n #define cmpxchg64_local\t\tcmpxchg64\n #endif\n \n-#ifdef CONFIG_IA64_DEBUG_CMPXCHG\n-# define CMPXCHG_BUGCHECK_DECL\tint _cmpxchg_bugcheck_count = 128;\n-# define CMPXCHG_BUGCHECK(v)\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-\tif (_cmpxchg_bugcheck_count-- <= 0) {\t\t\t\t\\\n-\t\tvoid *ip;\t\t\t\t\t\t\\\n-\t\textern int _printk(const char *fmt, ...);\t\t\\\n-\t\tip = (void *) ia64_getreg(_IA64_REG_IP);\t\t\\\n-\t\t_printk(\"CMPXCHG_BUGCHECK: stuck at %p on word %p\\n\", ip, (v));\\\n-\t\tbreak;\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-} while (0)\n-#else /* !CONFIG_IA64_DEBUG_CMPXCHG */\n-# define CMPXCHG_BUGCHECK_DECL\n-# define CMPXCHG_BUGCHECK(v)\n-#endif /* !CONFIG_IA64_DEBUG_CMPXCHG */\n-\n #endif /* !__ASSEMBLY__ */\n \n #endif /* _UAPI_ASM_IA64_CMPXCHG_H */\ndiff --git a/scripts/headers_install.sh b/scripts/headers_install.sh\nindex 36b56b746fce..afdddc82f02b 100755\n--- a/scripts/headers_install.sh\n+++ b/scripts/headers_install.sh\n@@ -76,7 +76,6 @@ arch/arc/include/uapi/asm/swab.h:CONFIG_ARC_HAS_SWAPE\n arch/arm/include/uapi/asm/ptrace.h:CONFIG_CPU_ENDIAN_BE8\n arch/hexagon/include/uapi/asm/ptrace.h:CONFIG_HEXAGON_ARCH_VERSION\n arch/hexagon/include/uapi/asm/user.h:CONFIG_HEXAGON_ARCH_VERSION\n-arch/ia64/include/uapi/asm/cmpxchg.h:CONFIG_IA64_DEBUG_CMPXCHG\n arch/m68k/include/uapi/asm/ptrace.h:CONFIG_COLDFIRE\n arch/nios2/include/uapi/asm/swab.h:CONFIG_NIOS2_CI_SWAB_NO\n arch/nios2/include/uapi/asm/swab.h:CONFIG_NIOS2_CI_SWAB_SUPPORT\n-- \n2.31.1\n\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<20230426065032.517693-1-thuth@redhat.com>"
      },
      "tag" : "linux",
      "timestamp" : 1687967659.0094,
      "updated_on" : 1682491832,
      "uuid" : "5d5018da8d920aaa2696cbc73ba5fec8192a5d67"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "netdev@vger.domain.com, linux-kernel@vger.domain.com,\n        kuba@domain.com, davem@davemloft.net, edumazet@domain.com,\n        pabeni@redhat.com, richardcochran@gmail.com, sgoutham@marvell.com,\n        sbhatta@marvell.com, hkelam@marvell.com",
         "Content-Disposition" : "inline",
         "Content-Type" : "text/plain; charset=us-ascii",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/simple; d=domain.com;\n        s=k20201202; t=1682491885;\n        bh=aNiVjLYtZfJBHJpmXwfeVLdQ2tFgLGhNkuLVqZMq3RI=;\n        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;\n        b=R+cD+aaVcChHw+C8oPLdC0hqhWGu0NPMyKHXTH+56xWtGkUbZP3J9m+t0pdUhcz98\n         K1cYZ5GT4KeLe9/n1o8WYq1vqoFqn8wECPJI8mEXXHkBgBFFnJ8z4gc0a/AInZAIS3\n         BQOee2jywgcMmMHu7BmNdFlYJhMe8U5JyynnjZlWx+MgxqSm/gk/gRzHwQRpF2sWgy\n         V7e/Ulw96UaMBtrUQk/HwIvBU+yZecnSoAS0RzLxIwad2bmYftoKVfLah/6gKX81dj\n         kVhVUccbF0wdAXGx3Sx7Y0FP2jAGF23HTMSqcR5ojD0C5Uiz2XxHy0cvugaliyteHv\n         igdeX+KWyZuYw==",
         "Date" : "Wed, 26 Apr 2023 09:51:21 +0300",
         "From" : "Leon Romanovsky <leon@example.com>",
         "In-Reply-To" : "<20230426062528.20575-6-gakula@marvell.com>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<20230426065121.GI27649@unreal>",
         "Precedence" : "bulk",
         "Received" : "by smtp.domain.com (Postfix) with ESMTPSA id 2BB8FC433EF;\n        Wed, 26 Apr 2023 06:51:24 +0000 (UTC)",
         "References" : "<20230426062528.20575-1-gakula@marvell.com>\n <20230426062528.20575-6-gakula@marvell.com>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [net PATCH v2 5/9] octeontx2-pf: mcs: Fix NULL pointer\n dereferences",
         "To" : "Geetha sowjanya <gakula@marvell.com>",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Wed, Apr 26, 2023 at 11:55:24AM +0530, Geetha sowjanya wrote:\n> From: Subbaraya Sundeep <sbhatta@marvell.com>\n> \n> When system is rebooted after creating macsec interface\n> below NULL pointer dereference crashes occurred. This\n> patch fixes those crashes by using correct order of teardown\n> \n> [ 3324.406942] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000\n> [ 3324.415726] Mem abort info:\n> [ 3324.418510]   ESR = 0x96000006\n> [ 3324.421557]   EC = 0x25: DABT (current EL), IL = 32 bits\n> [ 3324.426865]   SET = 0, FnV = 0\n> [ 3324.429913]   EA = 0, S1PTW = 0\n> [ 3324.433047] Data abort info:\n> [ 3324.435921]   ISV = 0, ISS = 0x00000006\n> [ 3324.439748]   CM = 0, WnR = 0\n> ....\n> [ 3324.575915] Call trace:\n> [ 3324.578353]  cn10k_mdo_del_secy+0x24/0x180\n> [ 3324.582440]  macsec_common_dellink+0xec/0x120\n> [ 3324.586788]  macsec_notify+0x17c/0x1c0\n> [ 3324.590529]  raw_notifier_call_chain+0x50/0x70\n> [ 3324.594965]  call_netdevice_notifiers_info+0x34/0x7c\n> [ 3324.599921]  rollback_registered_many+0x354/0x5bc\n> [ 3324.604616]  unregister_netdevice_queue+0x88/0x10c\n> [ 3324.609399]  unregister_netdev+0x20/0x30\n> [ 3324.613313]  otx2_remove+0x8c/0x310\n> [ 3324.616794]  pci_device_shutdown+0x30/0x70\n> [ 3324.620882]  device_shutdown+0x11c/0x204\n> \n> [  966.664930] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000\n> [  966.673712] Mem abort info:\n> [  966.676497]   ESR = 0x96000006\n> [  966.679543]   EC = 0x25: DABT (current EL), IL = 32 bits\n> [  966.684848]   SET = 0, FnV = 0\n> [  966.687895]   EA = 0, S1PTW = 0\n> [  966.691028] Data abort info:\n> [  966.693900]   ISV = 0, ISS = 0x00000006\n> [  966.697729]   CM = 0, WnR = 0\n> [  966.833467] Call trace:\n> [  966.835904]  cn10k_mdo_stop+0x20/0xa0\n> [  966.839557]  macsec_dev_stop+0xe8/0x11c\n> [  966.843384]  __dev_close_many+0xbc/0x140\n> [  966.847298]  dev_close_many+0x84/0x120\n> [  966.851039]  rollback_registered_many+0x114/0x5bc\n> [  966.855735]  unregister_netdevice_many.part.0+0x14/0xa0\n> [  966.860952]  unregister_netdevice_many+0x18/0x24\n> [  966.865560]  macsec_notify+0x1ac/0x1c0\n> [  966.869303]  raw_notifier_call_chain+0x50/0x70\n> [  966.873738]  call_netdevice_notifiers_info+0x34/0x7c\n> [  966.878694]  rollback_registered_many+0x354/0x5bc\n> [  966.883390]  unregister_netdevice_queue+0x88/0x10c\n> [  966.888173]  unregister_netdev+0x20/0x30\n> [  966.892090]  otx2_remove+0x8c/0x310\n> [  966.895571]  pci_device_shutdown+0x30/0x70\n> [  966.899660]  device_shutdown+0x11c/0x204\n> [  966.903574]  __do_sys_reboot+0x208/0x290\n> [  966.907487]  __arm64_sys_reboot+0x20/0x30\n> [  966.911489]  el0_svc_handler+0x80/0x1c0\n> [  966.915316]  el0_svc+0x8/0x180\n> [  966.918362] Code: f9400000 f9400a64 91220014 f94b3403 (f9400060)\n> [  966.924448] ---[ end trace 341778e799c3d8d7 ]---\n> \n> Fixes: c54ffc73601c (\"octeontx2-pf: mcs: Introduce MACSEC hardware offloading\")\n> Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>\n> Signed-off-by: Sunil Goutham <sgoutham@marvell.com>\n> Signed-off-by: Geetha sowjanya <gakula@marvell.com>\n> ---\n>  drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c | 3 +--\n>  1 file changed, 1 insertion(+), 2 deletions(-)\n> \n\nThanks,\nReviewed-by: Leon Romanovsky <leonro@nvidia.com>\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<20230426065121.GI27649@unreal>"
      },
      "tag" : "linux",
      "timestamp" : 1687967659.01435,
      "updated_on" : 1682491881,
      "uuid" : "5b767583cbeaae4660643570479e801cfbf72701"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "Matti Vaittinen <mazziesaccount@gmail.com>,\n        Maxime Ripard <maxime@cerno.tech>,\n        Brendan Higgins <brendan.higgins@linux.dev>,\n        Stephen Boyd <sboyd@domain.com>,\n        Shuah Khan <skhan@linuxfoundation.org>,\n        Daniel Latypov <dlatypov@domain.com>,\n        Rae Moar <rmoar@domain.com>,\n        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,\n        \"Rafael J . Wysocki\" <rafael@domain.com>,\n        Heikki Krogerus <heikki.krogerus@linux.intel.com>,\n        Jonathan Cameron <jic23@domain.com>,\n        linux-kernel@vger.domain.com, linux-kselftest@vger.domain.com,\n        kunit-dev@googlegroups.com",
         "Content-Type" : "multipart/signed; protocol=\"application/pkcs7-signature\"; micalg=sha-256;\n        boundary=\"0000000000001c35be05fa37adf5\"",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=domain.com; s=20221208; t=1682491918; x=1685083918;\n        h=cc:to:subject:message-id:date:from:in-reply-to:references\n         :mime-version:from:to:cc:subject:date:message-id:reply-to;\n        bh=wElXf1wLx1RJfNW0iKlEDdzRW1/ZkH3DWQqPrw6Tzd4=;\n        b=HF0+QRnw9ICiurw86U/LgM5fzT0mpVosa90P4zqhTwet7UHrqFEjr114y7mxk3Djt+\n         DPNExJRsI9OqUCW9KhYhz7io5UeEkzqvIseYtlb7cUcNhndFTLzUVC0DWGtkswyfeVmQ\n         6M2MzwuZf3XNDMgWqkhJEJzCQ6QWRAm0J/p1oYvkymuNnCk2CDUijxdI12QhSh4K5+fE\n         kXg/kyRBDZmNUTeF9egGb1bxD7lC9Wg0NOh+jXpjgs+1dDw3VwTEMyjEqk1jURTsms6A\n         iXDnBVW+w+qSzqulIRFLymBg0INNcsr3xuTuxFQv1ccqSBlhSDkxEtBgU/PpKIG53cxR\n         kdzg==",
         "Date" : "Wed, 26 Apr 2023 14:51:45 +0800",
         "From" : "David Gow <davidgow@example.com>",
         "In-Reply-To" : "<5a820cf9aae169e18635a8c867835817a50892b0.camel@sipsolutions.net>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<CABVgOS=ca71mj=qsPBvji-iTf-QsjDrxGzOymVGBJj8oHaJzWg@mail.gmail.com>",
         "Precedence" : "bulk",
         "Received" : "by mail-qt1-x82b.domain.com with SMTP id d75a77b69052e-3ef31924c64so317751cf.1\n        for <linux-kernel@vger.domain.com>; Tue, 25 Apr 2023 23:51:58 -0700 (PDT)",
         "References" : "<20230421084226.2278282-1-davidgow@domain.com> <54b49d4ddf371d0581f3b795f50f7f6673557a96.camel@sipsolutions.net>\n <5a820cf9aae169e18635a8c867835817a50892b0.camel@sipsolutions.net>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [PATCH v1 0/3] kunit: Deferred action helpers",
         "To" : "Benjamin Berg <benjamin@sipsolutions.net>",
         "X-Gm-Message-State" : "AC+VfDwnDSWOMvByEcq4RTmFfNG7Ao+x2gebSVtnzKx2q3auPkaya0yB\n        LY5CXFu0GwxlMiLSffize02SUISXjKNWJjstqa4Y8A==",
         "X-Google-DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20221208; t=1682491918; x=1685083918;\n        h=cc:to:subject:message-id:date:from:in-reply-to:references\n         :mime-version:x-gm-message-state:from:to:cc:subject:date:message-id\n         :reply-to;\n        bh=wElXf1wLx1RJfNW0iKlEDdzRW1/ZkH3DWQqPrw6Tzd4=;\n        b=Jtmg3Xl7lTL33s5W+wywzjfomGuE8bh+Lde8xYVw1wY/8PB3DoUU1MsNhttGcX3Vs1\n         5esN/BEiV9vD1V6z0zBrKxo5GBTmwh2tooA9OiFZfgdEPu0gDdaMrU1DYbswUHLKhL7x\n         6rAUTMrEQmcZaGX4VTsyo/S9/bQ8s5TH/TFUf9l4pL7EvJ7Gl9RtYT/o4NWdb9EQqdpO\n         rkpIcZ3mTriXXP4/0G9tg4QSzcUs3PFhVcLFBFOa9+e0l4EwlNx91TJHBGWtvVxJfDqG\n         vXAEG8D3CYghOD7qGfQTmaqR1lGr8osp7lrNtdJndQgx48GloeygD5LjebVSJcD3dZKc\n         gPig==",
         "X-Google-Smtp-Source" : "ACHHUZ65QRA+WH2ViYNCiho5VWgtJE4TC91Nkqqj+oOyCYpHaQiXotsbWAsk2qVd2rjv+LsSaYe6KNu2V9kYs9nTiYQ=",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Received" : "by 2002:a05:622a:1ce:b0:3ef:31a5:13c with SMTP id\n t14-20020a05622a01ce00b003ef31a5013cmr165018qtw.3.1682491917727; Tue, 25 Apr\n 2023 23:51:57 -0700 (PDT)",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Mon, 24 Apr 2023 at 22:02, Benjamin Berg <benjamin@sipsolutions.net> wrote:\n>\n> Hi David,\n>\n> On Mon, 2023-04-24 at 14:32 +0200, Benjamin Berg wrote:\n> > On Fri, 2023-04-21 at 16:42 +0800, 'David Gow' via KUnit Development wrote:\n> > > This is v1 of the KUnit deferred actions API, which implements an\n> > > equivalent of devm_add_action[1] on top of KUnit managed resources. This\n> > > provides a simple way of scheduling a function to run when the test\n> > > terminates (whether successfully, or with an error). It's therefore very\n> > > useful for freeing resources, or otherwise cleaning up.\n> > >\n> > > The notable changes since RFCv2[2] are:\n> > > - Got rid of the 'cancellation token' concept. It was overcomplicated,\n> > >   and we can add it back if we need to.\n> > > - kunit_add_action() therefore now returns 0 on success, and an error\n> > >   otherwise (like devm_add_action()). Though you may wish to use:\n> > > - Added kunit_add_action_or_reset(), which will call the deferred\n> > >   function if an error occurs. (See devm_add_action_or_reset()). This\n> > >   also returns an error on failure, which can be asserted safely.\n> > > - Got rid of the function pointer typedef. Personally, I liked it, but\n> > >   it's more typedef-y than most kernel code.\n> > > - Got rid of the 'internal_gfp' argument: all internal state is now\n> > >   allocated with GFP_KERNEL. The main KUnit resource API can be used\n> > >   instead if this doesn't work for your use-case.\n> > >\n> > > I'd love to hear any further thoughts!\n> >\n> > I am happy with it as-is.\n>\n> Oh, wait. Nothing big, but I just noticed that the new API functions\n> seem to not yet be exported using EXPORT_SYMBOL_GPL.\n\nAh, nice catch! I'll add those to the next version.\n\nCheers,\n-- David\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<CABVgOS=ca71mj=qsPBvji-iTf-QsjDrxGzOymVGBJj8oHaJzWg@mail.gmail.com>"
      },
      "tag" : "linux",
      "timestamp" : 1687967659.0202,
      "updated_on" : 1682491905,
      "uuid" : "0ea8f6e5a24a1382ac333a0f10ecfa363f953979"
   },
   {
      "backend_name" : "PublicInbox",
      "backend_version" : "0.1.0",
      "category" : "message",
      "classified_fields_filtered" : null,
      "data" : {
         "Cc" : "Matti Vaittinen <mazziesaccount@gmail.com>,\n        Brendan Higgins <brendan.higgins@linux.dev>,\n        Stephen Boyd <sboyd@domain.com>,\n        Shuah Khan <skhan@linuxfoundation.org>,\n        Daniel Latypov <dlatypov@domain.com>,\n        Rae Moar <rmoar@domain.com>,\n        Benjamin Berg <benjamin@sipsolutions.net>,\n        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,\n        \"Rafael J . Wysocki\" <rafael@domain.com>,\n        Heikki Krogerus <heikki.krogerus@linux.intel.com>,\n        Jonathan Cameron <jic23@domain.com>,\n        linux-kernel@vger.domain.com, linux-kselftest@vger.domain.com,\n        kunit-dev@googlegroups.com",
         "Content-Type" : "multipart/signed; protocol=\"application/pkcs7-signature\"; micalg=sha-256;\n        boundary=\"00000000000051124605fa37ad77\"",
         "DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=domain.com; s=20221208; t=1682491921; x=1685083921;\n        h=cc:to:subject:message-id:date:from:in-reply-to:references\n         :mime-version:from:to:cc:subject:date:message-id:reply-to;\n        bh=E7WUK9l5ab7TXtH6Khba5tk5e927ngC9f08ZD0F1KpI=;\n        b=C26x15qHgibXkdc4k0Lq/V8+IrCd+CWATgbNfZkPlEQwjIITNgfDFNdNWjFnzXgug4\n         H2sHeCQg7xSfy4fCnYZQrkJYYzP8GNL1mWa23CZrNt1FSKBCS3GLf/wu46XygLOI9Amt\n         bbm7CEAIuJAHMTBEq8v4FO9P0N7E/jtfQ19/Vy1C71wYsY2vwRY4ItdeYouNJvAORmiC\n         sLLN/TwY/wpmBBApx+pMi/jcZHURvIu963KGrpuiN2IeljU88xY8Duk/QCzFyz5oYXRg\n         lkQCiVbfo/Yi+NMsQNOTzTZo0Ulsle8t6+QAMxAGm7ckK1Pi7wIi1uw0TawPNAhHtU9U\n         uFFw==",
         "Date" : "Wed, 26 Apr 2023 14:51:50 +0800",
         "From" : "David Gow <davidgow@domain.com>",
         "In-Reply-To" : "<knlcj7ub477vbdhi4jkhxg6eltrluffli2gett4t4w4ed4cztr@qlxpd4rmgx3g>",
         "List-ID" : "<linux-kernel.vger.domain.com>",
         "MIME-Version" : "1.0",
         "Message-ID" : "<CABVgOS=doetW4_MMYwh3bLM-VBMaTBm-7JU44Y2=zRDvgoLXbg@mail.gmail.com>",
         "Precedence" : "bulk",
         "Received" : "by mail-qt1-x82e.domain.com with SMTP id d75a77b69052e-3ef31924c64so317791cf.1\n        for <linux-kernel@vger.domain.com>; Tue, 25 Apr 2023 23:52:02 -0700 (PDT)",
         "References" : "<20230421084226.2278282-1-davidgow@domain.com> <knlcj7ub477vbdhi4jkhxg6eltrluffli2gett4t4w4ed4cztr@qlxpd4rmgx3g>",
         "Return-Path" : "<linux-kernel-owner@vger.domain.com>",
         "Subject" : "Re: [PATCH v1 0/3] kunit: Deferred action helpers",
         "To" : "Maxime Ripard <maxime@cerno.tech>",
         "X-Gm-Message-State" : "AC+VfDxTVl7x6H0DILja9Q1aRCQKI7dwLAXS6E/llpiTJ1imR6WXtrs6\n        z/SNioLwOQyNi57ovt5d0zWdPFtonqZPKO5HQ+7sAw==",
         "X-Google-DKIM-Signature" : "v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20221208; t=1682491921; x=1685083921;\n        h=cc:to:subject:message-id:date:from:in-reply-to:references\n         :mime-version:x-gm-message-state:from:to:cc:subject:date:message-id\n         :reply-to;\n        bh=E7WUK9l5ab7TXtH6Khba5tk5e927ngC9f08ZD0F1KpI=;\n        b=RfSe4wbYLTeE/esysJvgNzxvybsRDNxBaYNb1HirUbpfR08DKLrRJSaGdolOlfGix+\n         q7onXiOMEtqk47pHNBcn11ewxp/lFSZfCNgC49HSW4HAf9ENGnKiyE+U+pFL/aNYyZG+\n         f/sgK+Cs8KUWlGsrIhMHX2iHBVNFXi8UqhCsEhxkiaLzOFQkbjLpQGln2qHu9fYZkO7g\n         5YAA+pKTrzHX1j43bxPT4XanwXLJ186oaHdYnk0hIBSFnXijmfnwr+hOB4WTcAd1Jna0\n         kEaCu1NKMMY5xvFyYbYgFAOD+FOtqpjO5URxWidOaDVlAo0SwnYBX57zcgEIdU/W5ez9\n         h69g==",
         "X-Google-Smtp-Source" : "ACHHUZ5D7Ppt024Tijx/Bn5kxD17PMJ9pdt5PyVWCaThwawJ5rB8RwWdk386niifcHohha+LIBpxbX+4wyetVxuiYMU=",
         "X-Mailing-List" : "linux-kernel@vger.domain.com",
         "X-Received" : "by 2002:ac8:7e84:0:b0:3ef:1c85:5b5e with SMTP id\n w4-20020ac87e84000000b003ef1c855b5emr150190qtj.19.1682491921197; Tue, 25 Apr\n 2023 23:52:01 -0700 (PDT)",
         "X-Spam-Checker-Version" : "SpamAssassin 3.4.0 (2014-02-07) on\n\taws-us-west-2-korg-lkml-1.web.codeaurora.org",
         "body" : {
            "plain" : "On Tue, 25 Apr 2023 at 23:23, Maxime Ripard <maxime@cerno.tech> wrote:\n>\n> Hi,\n>\n> On Fri, Apr 21, 2023 at 04:42:23PM +0800, David Gow wrote:\n> > This is v1 of the KUnit deferred actions API, which implements an\n> > equivalent of devm_add_action[1] on top of KUnit managed resources. This\n> > provides a simple way of scheduling a function to run when the test\n> > terminates (whether successfully, or with an error). It's therefore very\n> > useful for freeing resources, or otherwise cleaning up.\n> >\n> > The notable changes since RFCv2[2] are:\n> > - Got rid of the 'cancellation token' concept. It was overcomplicated,\n> >   and we can add it back if we need to.\n> > - kunit_add_action() therefore now returns 0 on success, and an error\n> >   otherwise (like devm_add_action()). Though you may wish to use:\n> > - Added kunit_add_action_or_reset(), which will call the deferred\n> >   function if an error occurs. (See devm_add_action_or_reset()). This\n> >   also returns an error on failure, which can be asserted safely.\n> > - Got rid of the function pointer typedef. Personally, I liked it, but\n> >   it's more typedef-y than most kernel code.\n> > - Got rid of the 'internal_gfp' argument: all internal state is now\n> >   allocated with GFP_KERNEL. The main KUnit resource API can be used\n> >   instead if this doesn't work for your use-case.\n> >\n> > I'd love to hear any further thoughts!\n>\n> I've converted the KMS kunit tests to use that API when relevant, and\n> it works like a charm and is super usable, thanks so much.\n\nNice! I'm glad it's working well.\n>\n> One improvement we could do as a second step is to provide a\n> kunit_action_t type or something to make casting kfree-like functions\n> easier, but it's already great overall.\n\nI had that in an earlier version and got rid of it to better match\nwhat devm_* was doing, but I personally agree that it's nice to have.\nI'll add it back in the next version.\n\n> Reviewed-by: Maxime Ripard <maxime@cerno.tech>\n> Tested-by: Maxime Ripard <maxime@cerno.tech>\n\n\nCheers,\n-- David\n"
         },
         "unixfrom" : null
      },
      "origin" : "linux",
      "perceval_version" : "0.22.0",
      "search_fields" : {
         "item_id" : "<CABVgOS=doetW4_MMYwh3bLM-VBMaTBm-7JU44Y2=zRDvgoLXbg@mail.gmail.com>"
      },
      "tag" : "linux",
      "timestamp" : 1687967659.02651,
      "updated_on" : 1682491910,
      "uuid" : "8e3ffcba3f5f7f27cd151cdde0ee5a1f60314e48"
   }
]
